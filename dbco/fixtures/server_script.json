[
 {
  "allow_guest": 0,
  "api_method": "edit_submitted_salary_slip",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-08-03 22:56:19.432697",
  "name": "edit_submitted_salary_slip",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Salary Slip Updater",
  "script": "# def on_change_telephone_time(doc, fieldname):\r\n#     telephone_time = doc.telephone_time\r\n#     if 0 <= telephone_time <= 50:\r\n#         # Update telephone_expenses\r\n#         doc.telephone_expenses = 50 - telephone_time\r\n#     else:\r\n#         # Set telephone_time to 0 and show error message\r\n#         doc.telephone_time = 0\r\n#         frappe.throw(\r\n#             \"Telephone time must be between 0 and 50. Value set to 0.\"\r\n#         )\r\ndef on_change_telephone_time(doc):\r\n    child_table = doc.get_value(\"Salary Slip Deductions Table\")\r\n    telephone_time = child_table.telephone_time\r\n    if not (0 <= telephone_time <= 50):\r\n        doc.telephone_time = 0\r\n        frappe.throw(\r\n            \"Telephone time must be between 0 and 50. Value set to 0.\"\r\n        )\r\n\r\ndef update_salary_slip(doc):\r\n    # Access the child table field in the current document\r\n    earnings_table = doc.get(\"salary_slip_earnings_table\")\r\n    deductions_table = doc.get(\"salary_slip_deductions_table\")\r\n    \r\n    # Loop through each row in the earnings_table\r\n    for earnings_row in earnings_table:\r\n        # Access the fields in each row\r\n        employee = earnings_row.get(\"employee\")\r\n        normal_overtime = earnings_row.get(\"normal_overtime\")\r\n        holiday_overtime = earnings_row.get(\"holiday_overtime\")\r\n        sales_commission = earnings_row.get(\"sales_commission\")\r\n        other = earnings_row.get(\"other\")\r\n        \r\n        # Fetch the salary slip document for this employee\r\n        salary_slip_name = frappe.db.get_value('Salary Slip', {'employee': employee}, 'name')\r\n        if salary_slip_name:\r\n            # Fetch the salary slip document\r\n            salary_slip = frappe.get_doc('Salary Slip', salary_slip_name)\r\n            \r\n            # Set the fields to the new values\r\n            salary_slip.normal_overtime = normal_overtime\r\n            salary_slip.holiday_overtime = holiday_overtime\r\n            salary_slip.sales_commission = sales_commission\r\n            salary_slip.other = other\r\n            \r\n            # Save the new salary slip\r\n            salary_slip.save()\r\n            \r\n            # Print the value of normal_overtime after saving\r\n            frappe.msgprint(f\"Salary Slip Earnings for employee {employee} saved successfully.\")\r\n        else:\r\n            frappe.throw(f\"Salary Slip Earnings not found for the selected employee: {employee}.\")\r\n    \r\n    # Loop through each row in the deductions_table\r\n    for deductions_row in deductions_table:\r\n        employee = deductions_row.get(\"employee\")\r\n        loan = deductions_row.get(\"loan\")\r\n        telephone_expenses = deductions_row.get(\"telephone_expenses\")\r\n        personal_customer_overdue = deductions_row.get(\"personal_customer_overdue\")\r\n        \r\n        # Fetch the salary slip document for this employee\r\n        salary_slip_name = frappe.db.get_value('Salary Slip', {'employee': employee}, 'name')\r\n        if salary_slip_name:\r\n            # Fetch the salary slip document\r\n            salary_slip = frappe.get_doc('Salary Slip', salary_slip_name)\r\n            \r\n            # Set the fields to the new values\r\n            salary_slip.loan = loan\r\n            salary_slip.telephone_expenses = telephone_expenses\r\n            salary_slip.personal_customer_overdue = personal_customer_overdue\r\n            \r\n            # Save the new salary slip\r\n            salary_slip.save()\r\n            \r\n            # Print the value of loan after saving\r\n            frappe.msgprint(f\"Salary Slip Deductions for employee {employee} saved successfully.\")\r\n        else:\r\n            frappe.throw(f\"Salary Slip Deductions not found for the selected employee: {employee}.\")\r\n\r\nupdate_salary_slip(doc)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-04 15:33:39.448595",
  "name": "telephone_time_trigger",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Payroll Deductions Table",
  "script": "# def on_change_telephone_time(doc, fieldname):\r\n#     telephone_time = doc.telephone_time\r\n#     if 0 <= telephone_time <= 50:\r\n#         # Update telephone_expenses\r\n#         doc.telephone_expenses = 50 - telephone_time\r\n#     else:\r\n#         # Set telephone_time to 0 and show error message\r\n#         doc.telephone_time = 0\r\n#         frappe.throw(\r\n#             \"Telephone time must be between 0 and 50. Value set to 0.\"\r\n#         )\r\n\r\n# def on_change_telephone_time(doc, fieldname):\r\n#     child_table = doc.get_value(fieldname)\r\n#     telephone_time = child_table.telephone_time\r\n#     if not (0 <= telephone_time <= 50):\r\n#         doc.telephone_time = 0\r\n#         frappe.throw(\r\n#             \"Telephone time must be between 0 and 50. Value set to 0.\"\r\n#         )\r\n        \r\n# def validate_telephone_time(doc):\r\n#     telephone_time = doc.telephone_time\r\n#     if not (0 <= telephone_time <= 50):\r\n#         frappe.throw(\r\n#             \"Telephone time must be between 0 and 50. Value is: {}\".format(telephone_time)\r\n#         )\r\n\r\ndef calculate_telephone_expenses(doc, method):\r\n    doc.telephone_expenses = 50 - doc.telephone_time\r\nbefore_insert = {\r\n    \"Salary Slip Deductions Table\": calculate_telephone_expenses\r\n}",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "create_salary_slips",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-09 08:59:07.823539",
  "name": "create_salary_slips",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Payroll Entry",
  "script": "# @frappe.whitelist()\r\n# def create_salary_slips(self):\r\n#     \"\"\"\r\n#     Creates salary slip for selected employees if already not created\r\n#     \"\"\"\r\n#     self.check_permission(\"write\")\r\n#     employees = [emp.employee for emp in self.employees]\r\n#     if employees:\r\n#         args = frappe._dict(\r\n#             {\r\n#                 \"salary_slip_based_on_timesheet\": self.salary_slip_based_on_timesheet,\r\n#                 \"payroll_frequency\": self.payroll_frequency,\r\n#                 \"start_date\": self.start_date,\r\n#                 \"end_date\": self.end_date,\r\n#                 \"company\": self.company,\r\n#                 \"posting_date\": self.posting_date,\r\n#                 \"deduct_tax_for_unclaimed_employee_benefits\": self.deduct_tax_for_unclaimed_employee_benefits,\r\n#                 \"deduct_tax_for_unsubmitted_tax_exemption_proof\": self.deduct_tax_for_unsubmitted_tax_exemption_proof,\r\n#                 \"payroll_entry\": self.name,\r\n#                 \"exchange_rate\": self.exchange_rate,\r\n#                 \"currency\": self.currency,\r\n#             }\r\n#         )\r\n#         args[\"loan\"] = []\r\n#         args[\"telephone_expenses\"] = []\r\n#         args[\"personal_customer_overdue\"] = []\r\n#         args[\"normal_overtime\"] = []\r\n#         args[\"holiday_overtime\"] = []\r\n#         args[\"sales_commission\"] = []\r\n#         args[\"other\"] = []\r\n    \r\n#         for emp in self.employees:\r\n#             earnings_table = emp.payroll_earnings_table\r\n#             deductions_table = emp.payroll_deductions_table\r\n    \r\n#             for earnings_row in earnings_table:\r\n#                 args[\"normal_overtime\"].append(earnings_row.normal_overtime)\r\n#                 args[\"holiday_overtime\"].append(earnings_row.holiday_overtime)\r\n#                 args[\"sales_commission\"].append(earnings_row.sales_commission)\r\n#                 args[\"other\"].append(earnings_row.other)\r\n    \r\n#             for deductions_row in deductions_table:\r\n#                 args[\"loan\"].append(deductions_row.loan)\r\n#                 args[\"telephone_expenses\"].append(deductions_row.telephone_expenses)\r\n#                 args[\"personal_customer_overdue\"].append(deductions_row.personal_customer_overdue)\r\n    \r\n#         if len(employees) > 30:\r\n#             frappe.enqueue(create_salary_slips_for_employees, timeout=600, employees=employees, args=args)\r\n#         else:\r\n#             create_salary_slips_for_employees(employees, args, publish_progress=False)\r\n#             # since this method is called via frm.call this doc needs to be updated manually\r\n#             self.reload()\r\n# from erpnext.payroll.doctype.payroll_entry.payroll_entry import PayrollEntry\r\n# from frappe.model.document import Document\r\n# class CustomPayrollEntry(Document):\r\n\r\n@frappe.whitelist()\r\ndef create_salary_slips(doc):\r\n    # Access the child table fields in the current document\r\n    earnings_table = doc.get(\"payroll_earnings_table\")\r\n    deductions_table = doc.get(\"payroll_deductions_table\")\r\n    \r\n    # Clear existing rows in the child tables\r\n    doc.set(\"payroll_earnings_table\", [])\r\n    doc.set(\"payroll_deductions_table\", [])\r\n    \r\n    employees = doc.get_emp_list()\r\n\r\n    for employee in employees:\r\n        # Fetch the salary slip document for this employee\r\n        salary_slip_name = frappe.db.get_value('Salary Slip', {'employee': employee}, 'name')\r\n\r\n        if salary_slip_name:\r\n            salary_slip = frappe.get_doc('Salary Slip', salary_slip_name)\r\n\r\n            # Create new rows for earnings and deductions\r\n            earnings_row = doc.append('payroll_earnings_table', {})\r\n            earnings_row.employee = employee\r\n            earnings_row.employee_name = salary_slip.employee_name\r\n            earnings_row.normal_overtime = salary_slip.normal_overtime\r\n            earnings_row.holiday_overtime = salary_slip.holiday_overtime\r\n            earnings_row.sales_commission = salary_slip.sales_commission\r\n            earnings_row.other = salary_slip.other\r\n\r\n            deductions_row = doc.append('payroll_deductions_table', {})\r\n            deductions_row.employee = employee\r\n            deductions_row.employee_name = salary_slip.employee_name\r\n            deductions_row.loan = salary_slip.loan\r\n            deductions_row.telephone_expenses = salary_slip.telephone_expenses\r\n            deductions_row.personal_customer_overdue = salary_slip.personal_customer_overdue\r\n\r\n    try:\r\n        doc.save()\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error saving document: {e}\")\r\n        frappe.throw(\"Error occurred while saving document. Please try again.\")\r\n\r\n    frappe.msgprint(\"Salary Slip Earnings and Deductions saved successfully.\")\r\n\r\n\r\n\r\n\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "fetch_and_populate_earnings_and_deductions",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-08-09 08:11:25.708427",
  "name": "fetch_and_populate_earnings_and_deductions",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "reference_doctype": "Payroll Entry",
  "script": "# @frappe.whitelist()\n# def fetch_and_populate_earnings_and_deductions(doc):\n\n#     doc.set(\"employees\", [])\n#     employees = doc.get_emp_list()\n#     # if not employees:\n#     #     error_msg = _(\n#     #         \"No employees found for the mentioned criteria:<br>Company: {0}<br> Currency: {1}<br>Payroll Payable Account: {2}\"\n#     #     ).format(\n#     #         frappe.bold(doc.company),\n#     #         frappe.bold(doc.currency),\n#     #         frappe.bold(doc.payroll_payable_account),\n#     #     )\n#     #     if doc.branch:\n#     #         error_msg += \"<br>\" + _(\"Branch: {0}\").format(frappe.bold(doc.branch))\n#     #     if doc.department:\n#     #         error_msg += \"<br>\" + _(\"Department: {0}\").format(frappe.bold(doc.department))\n#     #     if doc.designation:\n#     #         error_msg += \"<br>\" + _(\"Designation: {0}\").format(frappe.bold(doc.designation))\n#     #     if doc.start_date:\n#     #         error_msg += \"<br>\" + _(\"Start date: {0}\").format(frappe.bold(doc.start_date))\n#     #     if doc.end_date:\n#     #         error_msg += \"<br>\" + _(\"End date: {0}\").format(frappe.bold(doc.end_date))\n#     #     frappe.throw(error_msg, title=_(\"No employees found\"))\n\n#     salary_slips = frappe.get_all(\n#         'Salary Slip',\n#         filters={'employee': ['in', [emp.employee for emp in doc.employees]]},\n#         fields=[\n#             'employee',\n#             'employee_name',\n#             'normal_overtime',\n#             'holiday_overtime',\n#             'sales_commission',\n#             'other',\n#             'loan',\n#             'telephone_expenses',\n#             'personal_customer_overdue'\n#         ]\n#     )\n\n#     for slip in salary_slips:\n#         earnings_row = frappe.model.add_child(doc, 'Payroll Entry', 'payroll_earnings_table')\n#         deductions_row = frappe.model.add_child(doc, 'Payroll Entry', 'payroll_deductions_table')\n#         earnings_row.employee = slip.employee\n#         deductions_row.employee = slip.employee\n#         earnings_row.employee_name = slip.employee_name\n#         deductions_row.employee_name = slip.employee_name\n#         earnings_row.normal_overtime = slip.normal_overtime\n#         earnings_row.holiday_overtime = slip.holiday_overtime\n#         earnings_row.sales_commission = slip.sales_commission\n#         earnings_row.other = slip.other\n#         deductions_row.loan = slip.loan\n#         deductions_row.telephone_expenses = slip.telephone_expenses\n#         deductions_row.personal_customer_overdue = slip.personal_customer_overdue\n\n#     doc.save()\n#     doc.reload()\n\n# @frappe.whitelist()\n# def fetch_and_populate_earnings_and_deductions(doc):\n#     # Access the child table field in the current document\n#     earnings_table = doc.get(\"payroll_earnings_table\")\n#     deductions_table = doc.get(\"payroll_deductions_table\")\n    \n#     # Loop through each row in the earnings_table\n#     for earnings_row in earnings_table:\n#         # Access the fields in each row\n#         employee = earnings_row.get(\"employee\")\n#         normal_overtime = earnings_row.get(\"normal_overtime\")\n#         holiday_overtime = earnings_row.get(\"holiday_overtime\")\n#         sales_commission = earnings_row.get(\"sales_commission\")\n#         other = earnings_row.get(\"other\")\n        \n#         # Fetch the salary slip document for this employee\n#         salary_slip_name = frappe.db.get_value('Salary Slip', {'employee': employee}, 'name')\n#         if salary_slip_name:\n#             # Fetch the salary slip document\n#             salary_slip = frappe.get_doc('Salary Slip', salary_slip_name)\n            \n#             # Set the fields to the new values\n#             normal_overtime = salary_slip.normal_overtime \n#             holiday_overtime = salary_slip.holiday_overtime\n#             sales_commission = salary_slip.sales_commission\n#             other = salary_slip.other\n            \n#             # Print the value of normal_overtime after saving\n#             frappe.msgprint(f\"Salary Slip Earnings for employee {employee} saved successfully.\")\n#         else:\n#             frappe.throw(f\"Salary Slip Earnings not found for the selected employee: {employee}.\")\n    \n#     # Loop through each row in the deductions_table\n#     for deductions_row in deductions_table:\n#         employee = deductions_row.get(\"employee\")\n#         loan = deductions_row.get(\"loan\")\n#         telephone_expenses = deductions_row.get(\"telephone_expenses\")\n#         personal_customer_overdue = deductions_row.get(\"personal_customer_overdue\")\n        \n#         # Fetch the salary slip document for this employee\n#         salary_slip_name = frappe.db.get_value('Salary Slip', {'employee': employee}, 'name')\n#         if salary_slip_name:\n#             # Fetch the salary slip document\n#             salary_slip = frappe.get_doc('Salary Slip', salary_slip_name)\n            \n#             # Set the fields to the new values\n#             loan = salary_slip.loan \n#             telephone_expenses = salary_slip.telephone_expenses \n#             personal_customer_overdue = salary_slip.personal_customer_overdue  \n            \n#             # Print the value of loan after saving\n#             frappe.msgprint(f\"Salary Slip Deductions for employee {employee} saved successfully.\")\n#         else:\n#             frappe.throw(f\"Salary Slip Deductions not found for the selected employee: {employee}.\")\n#     doc.save()\n#     doc.reload()\n@frappe.whitelist()\ndef fetch_and_populate_earnings_and_deductions(doc):\n    # Access the child table fields in the current document\n    earnings_table = doc.get(\"payroll_earnings_table\")\n    deductions_table = doc.get(\"payroll_deductions_table\")\n    \n    # Clear existing rows in the child tables\n    doc.set(\"payroll_earnings_table\", [])\n    doc.set(\"payroll_deductions_table\", [])\n    \n    # Fetch the list of employees\n    employees = doc.get_emp_list()\n    \n    for employee in employees:\n        # Fetch the salary slip document for this employee\n        salary_slip_name = frappe.db.get_value('Salary Slip', {'employee': employee}, 'name')\n        \n        if salary_slip_name:\n            salary_slip = frappe.get_doc('Salary Slip', salary_slip_name)\n            \n            # Create new rows for earnings and deductions\n            earnings_row = frappe.new_doc('Payroll Entry')\n            earnings_row.employee = employee\n            earnings_row.employee_name = salary_slip.employee_name\n            earnings_row.normal_overtime = salary_slip.normal_overtime\n            earnings_row.holiday_overtime = salary_slip.holiday_overtime\n            earnings_row.sales_commission = salary_slip.sales_commission\n            earnings_row.other = salary_slip.other\n            earnings_row.insert()\n            \n            deductions_row = frappe.new_doc('Payroll Entry')\n            deductions_row.employee = employee\n            deductions_row.employee_name = salary_slip.employee_name\n            deductions_row.loan = salary_slip.loan\n            deductions_row.telephone_expenses = salary_slip.telephone_expenses\n            deductions_row.personal_customer_overdue = salary_slip.personal_customer_overdue\n            deductions_row.insert()\n            \n            frappe.msgprint(f\"Salary Slip Earnings and Deductions for employee {employee} saved successfully.\")\n        else:\n            frappe.throw(f\"Salary Slip not found for employee: {employee}.\")\n    \n    doc.save()\n    doc.reload()\n\n",
  "script_type": "API"
 }
]